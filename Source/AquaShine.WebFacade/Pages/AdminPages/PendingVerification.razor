@page "/admin/pending"
@using AquaShine.WebSupport
@using H3x.BlazorProgressIndicator
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

@* @attribute [Authorize] *@

@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject IIndicatorService IndicatorService
@inject NavigationManager NavigationManager

<article>
    <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up">
        <ChildContent>
            <MatH1>Admin</MatH1>
        </ChildContent>
        <ElseContent>
            <MatH1>Administration</MatH1>
        </ElseContent>
    </MatHidden>
    <MatH2>Pending Submissions</MatH2>
    <Indicator IndicatorContext="DataTable">
        <div class="mat-layout-grid-inner">
            <section class="mat-layout-grid-cell-span-4">
                <MatTable Items="@_items" LoadInitialData="false" Striped="true" ShowPaging="false"
                          AllowSelection="true" DebounceMilliseconds="150" class="mat-elevation-z5"
                          SelectionChanged="SelectionChanged">
                    <MatTableHeader>
                        <!--<MatSortHeaderRow>-->
                        <th>Number</th>
                        <th>Name</th>
                        <th>Time to complete</th>
                        @*<th>Gender</th>
                            <th>Image</th>*@
                        <!--</MatSortHeaderRow>-->
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Id</td>
                        <td>@context.Name</td>
                        <td>@context.Submission?.TimeToComplete</td>
                        <td>
                            @if (context.Submission?.Verified ?? false)
                            {
                                <MatIcon Icon="@MatIconNames.Verified_user" />
                            }
                        </td>
                        @*<td>
                                <GenderImage Gender="context.BioGender" />
                            </td>
                            <td>
                                @if (context.Submission.DisplayImgUrl != null)
                                {
                                    <img height="100" src="@context.Submission.DisplayImgUrl" alt="An uploaded image by the entrant." />
                                }
                            </td>*@
                    </MatTableRow>
                </MatTable>
            </section>
            @if (Selected != null)
            {
                <section class="mat-layout-grid-cell-span-6">
                    <Indicator IndicatorContext="ExtendedCard">
                        <MatCard>
                            <MatCardContent>
                                <MatCardMedia Wide="true" ImageUrl="@Selected.Submission?.DisplayImgUrl?.ToString()"></MatCardMedia>
                                <div>
                                    <MatHeadline6>
                                        @Selected.Name
                                    </MatHeadline6>
                                    <MatSubtitle2>
                                        Finished in @Selected.Submission?.TimeToComplete
                                    </MatSubtitle2>
                                </div>

                                <img src="@Selected.Submission?.VerifyingImgUrl?.ToString())" />

                                <MatChipSet>
                                    <MatChip Label="@Selected.BioGender.ToString()"></MatChip>
                                    @if (Selected.Submission?.Verified ?? false)
                                    {
                                        <MatChip Label="Verified" LeadingIcon="@MatIconNames.Verified_user"></MatChip>
                                    }
                                    @if (Selected.Submission?.Position <= 5)
                                    {
                                        <MatChip Label="Top 5!" LeadingIcon="@MatIconNames.Whatshot"></MatChip>
                                    }
                                    @if (Selected.Submission?.Position <= 10)
                                    {
                                        <MatChip Label="Top 10!" LeadingIcon="@MatIconNames.Star"></MatChip>
                                    }
                                </MatChipSet>
                            </MatCardContent>
                            <MatCardActions>
                                <MatCardActionButtons>
                                    <MatButton OnClick="@ApproveCallback">Approve</MatButton>
                                    <MatButton OnClick="@ApproveHiddenCallback">Approve, Hidden</MatButton>
                                    <MatButton OnClick="@RejectCallback">Reject</MatButton>
                                </MatCardActionButtons>
                            </MatCardActions>
                        </MatCard>
                    </Indicator>
                </section>
            }
            else
            {
                <section class="mat-layout-grid-cell-span-6">
                    @* ReSharper disable once CommentTypo *@
                    <!--Placeholder to keep Paginator on the second row-->
                </section>
            }
            <nav class="mat-layout-grid-cell-span-6">
                <MatPaginator Length="@_totalLength" PageSize="5" Page="@OnPage"></MatPaginator>
            </nav>
        </div>
    </Indicator>
</article>

@code{

    enum VerifyMode
    {
        Approve,
        ApproveHidden,
        Reject
    }

    readonly List<Entrant> _items = new List<Entrant>();
    HttpClient _client = null!;

    int _pageSize = 25;
    int _pageIndex;
    int _totalLength;

    Task<int>? _getTotalLengthTask;

    void OnPage(MatPaginatorPageEvent e)
    {
        _pageSize = e.PageSize;
        _pageIndex = e.PageIndex;
        DataProcess();
    }

    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("ApiClient");
        _getTotalLengthTask = _client.GetFromJsonAsync<int>("results/count");
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _totalLength = await _getTotalLengthTask!;
            await DataProcess();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    Task DataProcess()
    {
        return IndicatorService.StartTaskAsync(async (task) =>
        {
            _totalLength = await _client.GetFromJsonAsync<int>($"results/count?Verified={false}");
            var data = await _client.GetFromJsonAsync<IEnumerable<Entrant>>($"results?PageSize={_pageSize}&Page={_pageIndex}&Verified={false}");
            _items.Clear();
            _items.AddRange(data);
            StateHasChanged();
        }, "DataTable", "Fetching data!", "Please wait ...");
    }

    private void SelectionChanged(object obj)
    {
        if (obj is Entrant entrant)
        {
            Selected = entrant;
            StateHasChanged();
        }
    }

    private void HandleCardClick(VerifyMode mode)
    {
        IndicatorService.StartTaskAsync(async (task) =>
        {
            var urlBase = $"results/{Selected?.Id}/";
            urlBase += mode switch
            {
                VerifyMode.Approve => "verify",
                VerifyMode.ApproveHidden => "verify?hide=true",
                VerifyMode.Reject => "reject",
                _ => throw new ArgumentOutOfRangeException(nameof(mode), mode, null)
            };
            var httpResponse = await _client.PatchAsync(urlBase, null);
            if (httpResponse.IsSuccessStatusCode)
            {
                var remove = _items.FindIndex(x => x.Id == Selected?.Id);
                _items.RemoveAt(remove);
                Selected = null;
                StateHasChanged();
                Toaster.Add($"Submission accepted by server", MatToastType.Success, "Success", MatIconNames.Error);
                return;
            }
            Toaster.Add($"Something went wrong! Status code: {httpResponse.StatusCode}", MatToastType.Danger, "Error", MatIconNames.Error);
        }, "ExtendedCard", "Processing...");
    }


    public Entrant? Selected { get; set; }

    private void ApproveCallback() => HandleCardClick(VerifyMode.Approve);
    private void ApproveHiddenCallback() => HandleCardClick(VerifyMode.ApproveHidden);
    private void RejectCallback() => HandleCardClick(VerifyMode.Reject);

}